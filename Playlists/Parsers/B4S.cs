/***
 * B4S.cs
 * 
 * Reads and writes playlist files in B4S format.
 *	
 * * * * * * * * *
 * 
 * Copyright 2014 Simplare
 * 
 * This code is part of the Stoffi Music Player Project.
 * Visit our website at: stoffiplayer.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version
 * 3 of the License, or (at your option) any later version.
 * 
 * See stoffiplayer.com/license for more information.
 ***/

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

using Stoffi.Core.Media;
using Stoffi.Core.Sources;

namespace Stoffi.Core.Playlists.Parsers
{
	/// <summary>
	/// Parser of playlists in B4S format.
	/// </summary>
	public class B4S : Parser
	{
		#region Methods

		/// <summary>
		/// Read a playlist from a stream.
		/// </summary>
		/// <param name="reader">Stream reader.</param>
		/// <param name="path">The relative path of the tracks in the playlist</param>
		/// <param name="resolveMetaData">If true and the playlist contains stream URLs, then a connection will be made to load meta data.</param>
		/// <returns>The playlist.</returns>
		public override List<Playlist> ReadStream (StreamReader reader, string path = "", bool resolveMetaData = true)
		{
			var playlist = new Playlist ();
			var data = reader.ReadToEnd();
			try
			{
				using (var xmlReader = XmlReader.Create(new StringReader(data)))
				{
					xmlReader.ReadToFollowing("playlist");
					playlist.Name = xmlReader.GetAttribute("label");

					while (xmlReader.ReadToFollowing("entry"))
					{
						var track = new Track();
						track.Path = xmlReader.GetAttribute("Playstring");
						try
						{
							while (xmlReader.Read())
							{
								if (xmlReader.NodeType == XmlNodeType.EndElement && xmlReader.Name == "entry")
									break;

								if (xmlReader.NodeType != XmlNodeType.Element)
									continue;

								switch (xmlReader.Name.ToLower())
								{
								case "name":
									xmlReader.Read();
									track.Title = xmlReader.Value;
									break;

								case "length":
									xmlReader.Read();
									track.Length = Convert.ToDouble(xmlReader.Value) / 1000;
									break;
								}
							}
						}
						catch (Exception e)
						{
							U.L(LogLevel.Warning, "B4S Parser", "Could not parse entry: " + e.Message);
						}

						if (!String.IsNullOrWhiteSpace(track.Path))
						{
							playlist.Tracks.Add(track);
						}
					}
					xmlReader.Close();
				}
			}
			catch (Exception e)
			{
				U.L(LogLevel.Warning, "B4S Parser", "Could not parse playlist: " + e.Message);
				return new List<Playlist> ();
			}
			return new List<Playlist>() {playlist};
		}

		/// <summary>
		/// Write a playlist to a stream.
		/// </summary>
		/// <param name="reader">Stream reader.</param>
		/// <param name="playlist">Playlist.</param>
		/// <param name="writer">Writer.</param>
		/// <param name="extension">The extension of the playlist path.</param>
		public override void WriteStream (Playlist playlist, StreamWriter writer, string extension = null)
		{
			try
			{
				var settings = new XmlWriterSettings();
				settings.Indent = true;
				settings.NewLineChars = "\r\n";
				settings.IndentChars = "  ";
				settings.NewLineHandling = NewLineHandling.Replace;

				using (var xmlWriter = XmlWriter.Create(writer, settings))
				{
					xmlWriter.WriteStartElement("WinampXML");
					xmlWriter.WriteComment("Generated by: Stoffi Music Player version " + Settings.Manager.Version.ToString());

					xmlWriter.WriteStartElement("playlist");
					xmlWriter.WriteAttributeString("num_entries", playlist.Tracks.Count.ToString());
					xmlWriter.WriteAttributeString("label", playlist.Name);

					foreach (var track in playlist.Tracks)
					{
						xmlWriter.WriteStartElement("entry");
						xmlWriter.WriteAttributeString("Playstring", track.Path);

						if (!String.IsNullOrWhiteSpace(track.Title))
							xmlWriter.WriteElementString("Name", track.Title);

						if (track.Length > 0)
							xmlWriter.WriteElementString("Length", U.T(track.Length));

						xmlWriter.WriteEndElement();
					}

					xmlWriter.WriteEndElement(); // playlist
					xmlWriter.WriteEndElement(); // WinampXML
					xmlWriter.WriteWhitespace("\n");
					xmlWriter.Close();
				}
			}
			catch (Exception e)
			{
				U.L (LogLevel.Warning, "B4S Parser", "Could not write playlist: " + e.Message);
			}
		}

		/// <summary>
		/// Determines if a playlist path is supported by the parser.
		/// </summary>
		/// <returns>true if the path is supported by the parser</returns>
		/// <param name="path">Path.</param>
		public override bool Supports (string path)
		{
			var ext = Path.GetExtension (path);
			return !String.IsNullOrWhiteSpace (ext) && ext.ToLower () == ".b4s";
		}

		#endregion
	}
}

